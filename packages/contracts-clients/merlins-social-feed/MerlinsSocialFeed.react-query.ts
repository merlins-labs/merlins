//@ts-nocheck

/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.25.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  Addr,
  Config,
  ExecuteMsg,
  Uint128,
  InstantiateMsg,
  PostCategory,
  PostResult,
  Reaction,
  Post,
  QueryMsg,
} from "./MerlinsSocialFeed.types";
import {
  MerlinsSocialFeedQueryClient,
  MerlinsSocialFeedClient,
} from "./MerlinsSocialFeed.client";
export const merlinsSocialFeedQueryKeys = {
  contract: [
    {
      contract: "merlinsSocialFeed",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...merlinsSocialFeedQueryKeys.contract[0], address: contractAddress },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  queryFeeByCategory: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_fee_by_category",
        args,
      },
    ] as const,
  queryLockedTokens: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_locked_tokens",
        args,
      },
    ] as const,
  queryAvailableFreePosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_available_free_posts",
        args,
      },
    ] as const,
  queryPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_post",
        args,
      },
    ] as const,
  querySubPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_post",
        args,
      },
    ] as const,
  querySubPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_posts",
        args,
      },
    ] as const,
  queryMainPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts",
        args,
      },
    ] as const,
  queryMainPostsCount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...merlinsSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts_count",
        args,
      },
    ] as const,
};
export interface MerlinsSocialFeedReactQuery<TResponse, TData = TResponse> {
  client: MerlinsSocialFeedQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface MerlinsSocialFeedQueryMainPostsCountQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryMainPostsCountResponse, TData> {}
export function useMerlinsSocialFeedQueryMainPostsCountQuery<
  TData = QueryMainPostsCountResponse
>({ client, options }: MerlinsSocialFeedQueryMainPostsCountQuery<TData>) {
  return useQuery<QueryMainPostsCountResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryMainPostsCount(client?.contractAddress),
    () =>
      client
        ? client.queryMainPostsCount()
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQueryMainPostsQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryMainPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    sort: string;
    user?: string;
  };
}
export function useMerlinsSocialFeedQueryMainPostsQuery<
  TData = QueryMainPostsResponse
>({ client, args, options }: MerlinsSocialFeedQueryMainPostsQuery<TData>) {
  return useQuery<QueryMainPostsResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryMainPosts(client?.contractAddress, args),
    () =>
      client
        ? client.queryMainPosts({
            count: args.count,
            from: args.from,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQuerySubPostsQuery<TData>
  extends MerlinsSocialFeedReactQuery<QuerySubPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    identifier: string;
    sort: string;
    user?: string;
  };
}
export function useMerlinsSocialFeedQuerySubPostsQuery<
  TData = QuerySubPostsResponse
>({ client, args, options }: MerlinsSocialFeedQuerySubPostsQuery<TData>) {
  return useQuery<QuerySubPostsResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.querySubPosts(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPosts({
            count: args.count,
            from: args.from,
            identifier: args.identifier,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQuerySubPostQuery<TData>
  extends MerlinsSocialFeedReactQuery<QuerySubPostResponse, TData> {
  args: {
    identifier: string;
    index: number;
    user?: string;
  };
}
export function useMerlinsSocialFeedQuerySubPostQuery<
  TData = QuerySubPostResponse
>({ client, args, options }: MerlinsSocialFeedQuerySubPostQuery<TData>) {
  return useQuery<QuerySubPostResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.querySubPost(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPost({
            identifier: args.identifier,
            index: args.index,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQueryPostQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryPostResponse, TData> {
  args: {
    identifier: string;
    user?: string;
  };
}
export function useMerlinsSocialFeedQueryPostQuery<TData = QueryPostResponse>({
  client,
  args,
  options,
}: MerlinsSocialFeedQueryPostQuery<TData>) {
  return useQuery<QueryPostResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryPost(client?.contractAddress, args),
    () =>
      client
        ? client.queryPost({
            identifier: args.identifier,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQueryAvailableFreePostsQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryAvailableFreePostsResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useMerlinsSocialFeedQueryAvailableFreePostsQuery<
  TData = QueryAvailableFreePostsResponse
>({
  client,
  args,
  options,
}: MerlinsSocialFeedQueryAvailableFreePostsQuery<TData>) {
  return useQuery<QueryAvailableFreePostsResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryAvailableFreePosts(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryAvailableFreePosts({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQueryLockedTokensQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryLockedTokensResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useMerlinsSocialFeedQueryLockedTokensQuery<
  TData = QueryLockedTokensResponse
>({ client, args, options }: MerlinsSocialFeedQueryLockedTokensQuery<TData>) {
  return useQuery<QueryLockedTokensResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryLockedTokens(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryLockedTokens({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedQueryFeeByCategoryQuery<TData>
  extends MerlinsSocialFeedReactQuery<QueryFeeByCategoryResponse, TData> {
  args: {
    category: number;
  };
}
export function useMerlinsSocialFeedQueryFeeByCategoryQuery<
  TData = QueryFeeByCategoryResponse
>({ client, args, options }: MerlinsSocialFeedQueryFeeByCategoryQuery<TData>) {
  return useQuery<QueryFeeByCategoryResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.queryFeeByCategory(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryFeeByCategory({
            category: args.category,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedConfigQuery<TData>
  extends MerlinsSocialFeedReactQuery<ConfigResponse, TData> {}
export function useMerlinsSocialFeedConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: MerlinsSocialFeedConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    merlinsSocialFeedQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface MerlinsSocialFeedCreatePostByBotMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedCreatePostByBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedCreatePostByBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedCreatePostByBotMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPostByBot(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedAddAIBotMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    addr: Addr;
    name: string;
    postLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedAddAIBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedAddAIBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, MerlinsSocialFeedAddAIBotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addAIBot(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedWithdrawFundMutation {
  client: MerlinsSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedWithdrawFundMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedWithdrawFundMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedWithdrawFundMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.withdrawFund(fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedUnlockTokensMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedUnlockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedUnlockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedUnlockTokensMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.unlockTokens(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedLockTokensMutation {
  client: MerlinsSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedLockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedLockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedLockTokensMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.lockTokens(fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedDeletePostMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedDeletePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedDeletePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedDeletePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.deletePost(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedTipPostMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedTipPostMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MerlinsSocialFeedTipPostMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, MerlinsSocialFeedTipPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.tipPost(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedReactPostMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    icon: string;
    identifier: string;
    up: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedReactPostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedReactPostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, MerlinsSocialFeedReactPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.reactPost(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedUpdatePostMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedUpdatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedUpdatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedUpdatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updatePost(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedCreatePostMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedCreatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedCreatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedCreatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPost(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedAddFreePostsMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    freeCount: Uint128;
    wallets: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedAddFreePostsMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedAddFreePostsMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedAddFreePostsMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addFreePosts(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedUpdateFeeByCategoryMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    category: number;
    fee: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedUpdateFeeByCategoryMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedUpdateFeeByCategoryMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedUpdateFeeByCategoryMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateFeeByCategory(msg, fee, memo, funds),
    options
  );
}
export interface MerlinsSocialFeedUpdateConfigMutation {
  client: MerlinsSocialFeedClient;
  msg: {
    owner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMerlinsSocialFeedUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      MerlinsSocialFeedUpdateConfigMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    MerlinsSocialFeedUpdateConfigMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options
  );
}
